{"ast":null,"code":"var _jsxFileName = \"/Users/janujangathieswaran/Documents/React Tutorials/burger-builder-app/src/components/Burger/Burger.js\";\nimport React from 'react';\nimport classes from './Burger.module.css';\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient';\n\nconst burger = props => {\n  //Object.keys returns an array of the property names (salad, bacon, etc)    \n\n  /*\n      Go through each ingredient and create an array based on the \n      amount of the particular ingredient and then use map to call \n      burgerincgredient the correct number of times\n       Reduce is executed on every element\n  */\n  let transformedIngredients = Object.keys(props.ingredients).map(igKey => {\n    return [...Array(props.ingredients[igKey])].map((_, i) => {\n      return React.createElement(BurgerIngredient, {\n        key: igKey + i,\n        type: igKey,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      });\n    }).reduce((arr, el) => {\n      return arr.concat(el);\n    }, []);\n  });\n  console.log(transformedIngredients);\n\n  if (transformedIngredients.length === \"0\") {\n    transformedIngredients = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Please add ingredients\");\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.Burger,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(BurgerIngredient, {\n    type: \"bread-top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), transformedIngredients, React.createElement(BurgerIngredient, {\n    type: \"bread-bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }));\n};\n\nexport default burger;","map":{"version":3,"sources":["/Users/janujangathieswaran/Documents/React Tutorials/burger-builder-app/src/components/Burger/Burger.js"],"names":["React","classes","BurgerIngredient","burger","props","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","reduce","arr","el","concat","console","log","length","Burger"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AACpB;;AACA;;;;;;AAOA,MAAIC,sBAAsB,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,WAAlB,EAA+BC,GAA/B,CAAmCC,KAAK,IAAI;AACrE,WAAO,CAAC,GAAGC,KAAK,CAACP,KAAK,CAACI,WAAN,CAAkBE,KAAlB,CAAD,CAAT,EAAqCD,GAArC,CAAyC,CAACG,CAAD,EAAGC,CAAH,KAAS;AACrD,aAAO,oBAAC,gBAAD;AAAkB,QAAA,GAAG,EAAEH,KAAK,GAAGG,CAA/B;AAAkC,QAAA,IAAI,EAAEH,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFM,EAEJI,MAFI,CAEG,CAACC,GAAD,EAAKC,EAAL,KAAY;AAClB,aAAOD,GAAG,CAACE,MAAJ,CAAWD,EAAX,CAAP;AACH,KAJM,EAIJ,EAJI,CAAP;AAKH,GAN4B,CAA7B;AAOAE,EAAAA,OAAO,CAACC,GAAR,CAAYd,sBAAZ;;AAEA,MAAIA,sBAAsB,CAACe,MAAvB,KAAkC,GAAtC,EAA0C;AACtCf,IAAAA,sBAAsB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAzB;AACH;;AAED,SACI;AAAK,IAAA,SAAS,EAAEJ,OAAO,CAACoB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKhB,sBAFL,EAGI,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAOH,CA7BD;;AA8BA,eAAeF,MAAf","sourcesContent":["import React from 'react';\nimport classes from './Burger.module.css';\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient';\n\nconst burger = props => {\n    //Object.keys returns an array of the property names (salad, bacon, etc)    \n    /*\n        Go through each ingredient and create an array based on the \n        amount of the particular ingredient and then use map to call \n        burgerincgredient the correct number of times\n\n        Reduce is executed on every element\n    */\n    let transformedIngredients = Object.keys(props.ingredients).map(igKey => {\n        return [...Array(props.ingredients[igKey])].map((_,i) => {\n            return <BurgerIngredient key={igKey + i} type={igKey} />;\n        }).reduce((arr,el) => {\n            return arr.concat(el);\n        }, []);\n    });\n    console.log(transformedIngredients);\n\n    if (transformedIngredients.length === \"0\"){\n        transformedIngredients = <p>Please add ingredients</p>;\n    }\n\n    return (\n        <div className={classes.Burger}>\n            <BurgerIngredient type=\"bread-top\"/>\n            {transformedIngredients}\n            <BurgerIngredient type=\"bread-bottom\"/>\n        </div>\n    );\n};\nexport default burger;"]},"metadata":{},"sourceType":"module"}